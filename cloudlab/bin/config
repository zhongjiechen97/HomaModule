#!/usr/bin/python3

# Copyright (c) 2023 Homa Developers
# SPDX-License-Identifier: BSD-1-Clause

"""
This script is used to configure CloudLab nodes for running Homa experiments.
It does things such as (re-)installing Homa, setting Homa configuration
parameters, and configuring the system in various ways such as setting
power management parameters and enabling RPS.
"""

import fcntl
import functools
from glob import glob
import os
import re
import subprocess
import sys
import time

from switch import *

# Names for the main network interface and VLAN for this host. Set by
# get_interfaces
interface = None
vlan = None

# Number of this node (e.g. 1 for "node1"). Set by get_node_num.
node_num = None

# CloudLab node type for this machine, such as xl170 or c6525-100g.
# Set by get_node_type.
node_type = None

# Number of nodes in the experiment (0 means uninitialized).
num_nodes = 0

# Cached result of get_node_names.
node_names = []

# Contains information from /proc/cpuinfo with one entry for each
# "processor" in /proc/cpuinfo. The entry is a dictionary with the
# following entries (same names as in /proc/cpuinfo):
# processor:    number of this core (hyperthread)
# core id:      number of the physical core (same for all hyperthreads
#               on the core)
# physical id:  number for the socket containing this core
# This array is filled in by read_cpu_info().
cpu_info = []

# The total number of physical cores (i.e. distinct values of "core id"
# in cpuinfo). Filled in by read_cpu_info().
num_phys_cores = 0

# Describes the the full channel mappings for xl170 machines at CloudLab.
# Entry i is the core that will handle incoming packets on channel i.
xl170_default_cores = [0, 10, 7, 19, 8, 18, 6, 16, 4, 14,
    11, 1, 7, 17, 15, 5, 13, 3,  2,  12]

def get_core_mask(core = -1):
    """
    Returns a string representing a bit mask containing one bit for each
    core. The mask is represented with one or more 32-bit hex values:
    "val,val,...val". If the core argument is -1, then all of the bits are
    ones (i.e. all cores are selected). If the core argument is >=0, then
    all of the bits will be zeros except for the one selecting the indicated
    core.

    core:    Either -1 (to select all cores) or the number of a single core
             to select..
    """
    read_cpu_info()
    mask_words = [0]
    for cpu in cpu_info:
        cur_core = cpu["processor"]
        word = core//32
        while word >= len(mask_words):
            mask_words.append(0);
        if (core == -1) or (cur_core == core):
            mask_words[word] |= 1<<(cur_core & 0x1f);
    result = ""
    while len(mask_words) > 0:
        if len(result) != 0:
            result += ",";
        result += ("%x" % (mask_words[-1]))
        mask_words.pop()
    return result

def get_interfaces():
    """
    Runs ifconfig and parses its output to identify the key network
    interfaces for this host. Returns a list containing two interface
    names. The first is the name of the hardware interface, and the
    second is the name of the VLAN associated with that interface.
    """

    global interface, vlan
    if interface:
        return [interface, vlan]
    available = ""
    for line in subprocess.run(["ifconfig"], stdout=subprocess.PIPE,
            encoding="utf-8", check=True).stdout.splitlines():
        match = re.match('^([a-z0-9]*):', line)
        if match:
            current = match.group(1)
            if available:
                available += ", "
            available += current
            if (('s1f1' in current) or ('s1f0' in current)
                    or ('s0f0' in current) or ('s0f1' in current)):
                interface = current
            continue
        if re.match('^[ ]+ inet 10\.0\.1\.', line):
            vlan = current
    if not vlan or not interface:
        print("Found the following interfaces: %s" % (available))
    if not vlan:
        raise Exception("Couldn't identify vlan interface")
    if not interface:
        raise Exception("Couldn't identify primary network interface")
    print("Primary network interface is %s, vlan is %s" % (interface, vlan))
    return [interface, vlan]

def get_nic_irqs():
    """
    Returns a list containing the IRQ numbers for NIC channels (entry
    0 in the list corresponds to channel 0, and so on).
    """
    irqs = {}
    f = open("/proc/interrupts")
    for line in f:
        match = re.match('([0-9]+): .* mlx5_comp([0-9]+)@pci:0000:03:00.1', line)
        if not match:
            continue
        irq = int(match.group(1))
        channel = int(match.group(2))
        irqs[channel] = irq
    result = []
    for i in range(len(irqs)):
        if not i in irqs:
            raise Exception('Couldn\'t find IRQ for NIC channel %d' % (i))
        result.append(irqs[i])
    return result

def get_node_num():
    """
    Returns the (integer) number of this node (e.g., 1 for "node1").
    """

    global node_num
    if node_num != None:
        return node_num
    hostname = subprocess.run(["hostname"], stdout=subprocess.PIPE,
            encoding="utf-8", check=True).stdout
    match = re.match('node([0-9]+)\.', hostname)
    if not match:
        raise Exception("Couldn't figure out node number for this node")
    node_num = int(match.group(1))
    print("Number of this node is %d" % (node_num))
    return node_num

def get_node_type():
    """
    Returns the node type for this machine.
    """

    global node_type
    if node_type:
        return node_type
    f = open("/var/emulab/boot/nodetype")
    node_type = f.read().strip()
    f.close()
    print("Type of this node is %s" % (node_type))
    return node_type

def get_node_names():
    """
    Return a list, in order of node number (node0 first), containing the
    name of each node in the experiment, such as hp083.
    """
    global node_names
    if len(node_names) > 0:
        return node_names
    node_map = {}
    f = open("/var/emulab/boot/ltpmap")
    for line in f:
        match = re.search('H node([0-9]+) ([^ ]+)', line)
        if match:
            num = int(match.group(1))
            node_map[int(match.group(1))] = match.group(2)
    f.close()
    if len(node_map) != get_num_nodes():
        raise Exception("get_node_names found only %d nodes, but expected %d"
                % (len(node_map), get_num_nodes()))
    node_names = []
    for i in range(len(node_map)):
        if not i in node_map:
            raise Exception("Couldn't find host name for node%d" % (i))
        node_names.append(node_map[i])
    return node_names

def get_num_nodes():
    """
    Returns the number of nodes in this experiment.
    """

    global num_nodes
    if num_nodes > 0:
        return num_nodes
    f = open("/var/emulab/boot/hostmap")
    for line in f:
        if re.match('node([-0-9.]+)', line):
            num_nodes += 1
    f.close()
    return num_nodes

def get_exp_ports():
    """
    Return a list containing all of the switch egress port numbers used by
    nodes in the current CloudLab experiment.
    """

    ports = []
    for name in get_node_names():
        match = re.match('[^0-9]+([0-9]+)', name)
        if not match:
            raise Exception("bad host name %s: expected number at end" % (name))
        ports.append(int(match.group(1)) % 40)
    return ports

def print_rss():
    """
    Print out the current RSS configuration (how many channels and which
    cores will handle them)
    """

    nic = "ens1f1np1"
    irqs = get_nic_irqs()
    num_channels = -1
    for line in subprocess.run(["ethtool", "-l", nic], stdout=subprocess.PIPE,
            encoding="utf-8", check=True).stdout.splitlines():
        match = re.match('Combined:[^0-9]+([0-9]+)', line)
        if match:
            num_channels = int(match.group(1))
    if num_channels <= 0:
        raise Exception('Couldn\'t get number of channels from ethtool')
    print('Number of NIC channels: %d' % (num_channels))
    print('Channel   Core')
    for i in range(num_channels):
        f = open('/proc/irq/%s/smp_affinity_list' % (irqs[i]))
        core = int(f.read())
        f.close()
        print('%-4d    %4d' % (i, core))

def read_cpu_info():
    """
    Read the file /proc/cpuinfo and store information from it in various
    global arrays above.
    """
    global cpu_info, num_phys_cores

    if len(cpu_info) > 0:
        return
    cpu = None
    cores = {}
    sockets = {}
    f = open("/proc/cpuinfo", "r")
    for line in f:
        match = re.match('([^\t]*)[\t ]+: (.*)', line)
        if match:
            name = match.group(1)
            value = match.group(2)
            # print("name '%s' value '%s'" % (name, value))
            if name == 'processor':
                cpu = int(value)
                cpu_info.append({name: int(value)})
            elif cpu == None:
                continue
            if name == "core id":
                cpu_info[-1][name] = int(value)
                cores[value] = 1
            elif name == "physical id":
                cpu_info[-1][name] = int(value)
                sockets[value] = 1
    f.close()
    num_phys_cores = len(cores)
    s = "sockets"
    if len(sockets) == 1:
        s = "socket"
    if num_phys_cores == len(cpu_info):
        print("This node has %d %s, %d cores, no hyperthreading" % (
                len(sockets), s, num_phys_cores))
    else:
        print("This node has %d %s, %d logical cores, %d-way "
                "hyperthreading" % (len(sockets), s, len(cpu_info),
                len(cpu_info)/num_phys_cores))

def add_ipv6_to_etc_hosts(num_hosts):
    """
    If /etc/hosts doesn't already contain IPv6 addresses for hosts
    in the cluster, add them. The num_hosts argument indicates how
    many hosts should be present in /etc/hosts.
    """

    # First see which, if any, entries are already in /etc/hosts.
    f = open("/etc/hosts", "r")
    old = f.read()
    f.close()
    for first in range(num_hosts-1, -1, -1):
        if ("fd00::%d" % (first+1)) in old:
            first += 1
            break
    if first < (num_hosts-1):
        print("Adding IPv6 addresses for nodes %d-%d to /etc/hosts" % (
                first, num_hosts-1))
        input = ""
        for i in range(first, num_hosts):
            input += "fd00::%d  node%d\n" % (i+1, i)
        subprocess.run(["sudo", "bash", "-c", "cat >> /etc/hosts"],
                input=input, encoding="utf-8", check=True)
    else:
        print("/etc/hosts already contains IPv6 addresses for nodes 0-%d" % (
                num_hosts-1))

def set_sysctl(name, value):
    """
    Set a Homa sysctl configuration option as given by name and value.
    """
    subprocess.run(["sudo", "sysctl", ".net.homa.%s=%s" % (name, value)],
            check=True)

def config_homa(mod):
    """
    Install the Homa kernel driver and configure it appropriately for
    this node type.
    mod:   the path to the Homa module '.ko' file
    """
    type = get_node_type()
    print("Installing Homa kernel module from %s" % (mod))
    subprocess.run(["sudo", "rmmod", "homa"], check=False)
    subprocess.run(["sudo", "bash", "-c", "insmod %s" % (mod)],
            check=True)

    set_sysctl("num_priorities", "8")
    if type == "xl170":
        set_sysctl("link_mbps", "25000")
        set_sysctl("max_nic_queue_ns", "2000")
        set_sysctl("unsched_bytes", "60000")
        set_sysctl("window", "100000")
        set_sysctl("max_incoming", "480000")
        set_sysctl("max_gso_size", "10000")
    elif type == "c6525-100g":
        set_sysctl("link_mbps", "100000")
        set_sysctl("max_nic_queue_ns", "5000")
        set_sysctl("unsched_bytes", "60000")
        set_sysctl("window", "200000")
        set_sysctl("max_incoming", "1600000")
        set_sysctl("max_gso_size", "100000")
    elif type == "c6525-25g":
        set_sysctl("link_mbps", "25000")
        set_sysctl("max_nic_queue_ns", "5000")
        set_sysctl("unsched_bytes", "60000")
        set_sysctl("window", "100000")
        set_sysctl("max_incoming", "480000")
        set_sysctl("max_gso_size", "10000")
    else:
        raise Exception("Can't configure Homa: unknown node type %s" % (type))

def config_ecn_threshold(kb):
    """
    Modify the configuration of this experiment's egress ports at the top-of-rack switch
    to enable optimal Homa performance.
    """
    s = Switch(True)
    for port in get_exp_ports():
        print("Configuring ECN threshold for port %d" % (port))
        s.set_ecn_threshold(port, kb)
    s.close()

def config_ipv6(num_hosts, vlan):
    """
    Configure this node to enable IPv6.

    num_hosts: the total number of hosts in the cluster (OK to overestimate).
    vlan:      name of the VLAN interface to configure with IPv6 info
    """
    vlan = get_interfaces()[1]
    # Configure ifconfig and route if not already done.
    if "inet6 fd00::" in subprocess.run(["ifconfig", vlan],
            stdout=subprocess.PIPE, encoding="utf-8", check=True).stdout:
        print("IPv6 already configured")
    else:
        print("Configuring IPv6:")
        subprocess.run(["sudo", "ifconfig", vlan, "add", "fd00::%d/64" % (
                get_node_num() + 1)], check=True)
        subprocess.run(["sudo", "route", "-6", "add", "fd00::/16", vlan],
                check=True)
    add_ipv6_to_etc_hosts(num_hosts)

def config_lb(config):
    """
    Configures load balancing as specified by config. This includes RSS
    (Receive-Side Scaling) and SoftIRQ steering by setting the number of
    NIC channels and which cores will handle each. It will also configure
    Homa's mechanism for choosing SoftIRQ cores as described in gen3.txt,
    and it will set related sysctl parameters such as gro_policy and
    gro_busy_usecs.

    config:  Indicates which configuration is desired; one of:
             xl170_default:   Same as Gen2, except with the default boot-time
                              assignment of network channels to cores
             gen2:            For Homa Gen2 load balancing: one channel/core
             gen3:            For Homa Gen3 load balancing: one channel/4 cores
             gen3_alt:        Gen3 with one channel/2 cores
    """

    read_cpu_info()

    if config == 'xl170_default':
        cores = xl170_default_cores
        set_sysctl('gro_policy', '114')
        set_sysctl('gro_busy_usecs', '0')
    elif config == 'gen2':
        cores = range(len(cpu_info))
        set_sysctl('gro_policy', '114')
        set_sysctl('gro_busy_usecs', '0')
    elif config == 'gen3':
        cores = [2*i for i in range(len(cpu_info)//4)]
        set_sysctl('gro_policy', '226')
        set_sysctl('gro_busy_usecs', '2')
    elif config == 'gen3_alt':
        cores = range(len(cpu_info)//2)
        set_sysctl('gro_policy', '226')
        set_sysctl('gro_busy_usecs', '2')
    else:
        raise Exception('Bad load balancing config "%s"; must be '
                'xl170_default, gen2, gen3, or gen3_alt' % (config))

    subprocess.run(["sudo", "ethtool", "-L", "ens1f1np1", "combined",
          str(len(cores))], check=True)

    irqs = get_nic_irqs()
    half_cores = len(cpu_info)//2
    for i in range(len(cores)):
        softirq_cores = []
        core = cores[i]
        if config == 'gen3':
            # Use every 4th core for GRO, with 3 choices for SoftIRQ
            softirq_cores = [2*i + 1, half_cores + 2*i, half_cores + 2*i + 1]
        elif config == 'gen3_alt':
            # Use every other core for GRO, with only 1 choice for SoftIRQ
            softirq_cores = [(half_cores + (core+1)%half_cores), -1, -1]
        softirq_msg = ''
        if softirq_cores:
            softirq_msg = ", SoftIRQ on cores %s" % (softirq_cores)
            subprocess.run(["sudo", "sysctl",
                    ".net.homa.gen3_softirq_cores=%d %d %d %d" % (cores[i],
                    softirq_cores[0], softirq_cores[1], softirq_cores[2])],
                    check=True)

        subprocess.run(["sudo", "bash", "-c",
                "echo %d > /proc/irq/%s/smp_affinity_list" % (cores[i], irqs[i])],
                check=True)

        print("Configured RSS for channel %d (IRQ %d): NAPI on core %d%s"
                % (i, irqs[i], cores[i], softirq_msg))

def config_mtu(size):
    """
    Set the maximum allowable packet length for this node to size.
    """
    [interface, vlan] = get_interfaces()
    subprocess.run(["sudo", "ip", "link", "set", interface, "mtu", str(size)],
            check=True)
    subprocess.run(["sudo", "ip", "link", "set", vlan, "mtu", str(size)],
            check=True)
    print("MTU set to %d bytes" % (size))

def config_nic():
    """
    Configure the NIC for best performance (turn off interrupt delaying
    mechanisms).
    """
    interface = "ens1f1np1"
    subprocess.run(["sudo", "ethtool", "-C", interface, "adaptive-rx", "off"],
            check=False)
    subprocess.run(["sudo", "ethtool", "-C", interface, "rx-usecs", "5",
            "rx-frames", "1"], check=False)

def config_power():
    """
    Configure the machine's power management for best Homa performance.
    """
    type = get_node_type()
    if type == "xl170":
        # Intel E5-2640v4 processor. For Homa, it's best to leave C-states
        # enabled. This can cause CPUs to sleep in power-saving mode, but if
        # C-states are disabled, then so is Turbo mode, and that will hurt
        # peak peformance.
        print("Configuring power settings for Intel CPUs")
        try:
            subprocess.run(["sudo", "cpupower", "frequency-set", "-g",
                    "performance"], check=True)
        except subprocess.CalledProcessError:
            print("*** cpupower error; ignoring for now")
    elif (type == "c6525-100g") or (type == "c6525-25g"):
        # AMD 7402P (EPYC Rome processor); don't know of any appropriate
        # power setting changes
        return
    else:
        raise Exception("Can't configure power: unknown node type %s" % (type))

def config_reset_switch_all_ports():
    """
    Reset the configuration of all egress ports at the top-of-rack switch
    to undo a previous config_all_switch_ports.
    """
    s = Switch(True)
    s.reset_all_ports()
    s.close()

def config_reset_switch_ports():
    """
    Reset the configuration of the egress ports at the top-of-rack switch
    to undo a previous config_switch_ports.
    """
    s = Switch(True)
    for port in get_exp_ports():
        print("Resetting TOR port for port %d:" % (port))
        s.reset_port(port)
    s.close()

def config_rps():
    """
    Enable RPS (Receive Packet Steering) and RFS (Receive Flow Steering).
    """

    interface = "ens1f1np1"
    mask = get_core_mask()
    subprocess.run(["sudo", "sysctl", "-w",
            "net.core.rps_sock_flow_entries=32768"], check=True)
    flow_cnt = 0
    for file in glob("/sys/class/net/%s/queues/rx-*/rps_flow_cnt"
            % (interface)):
        subprocess.run(["sudo", "bash", "-c", "echo 2048 > %s" % (file)],
                check=True)
        flow_cnt += 1
    cpus = 0
    for file in glob("/sys/class/net/%s/queues/rx-*/rps_cpus" % (interface)):
        subprocess.run(["sudo", "bash", "-c", "echo %s > %s" % (mask, file)],
                check=True)
        cpus += 1
    print("Configured RPS and RFS: %d rps_flow_cnt files and %d rps_cpus files"
            % (flow_cnt, cpus))

def config_switch_buffer_limit(mbytes):
    """
    Restrict the total amount of buffer space available for egress ports
    in the top-of-rack switch.
    mbytes:  New limit, in Mbytes
    """
    s = Switch(True)
    s.set_buffer_limit(mbytes)
    s.close()

def config_switch_all_ports():
    """
    Modify the configuration of all egress ports at the top-of-rack switch
    to enable optimal Homa performance.
    """
    s = Switch(True)
    s.config_all_ports()
    s.close()

def config_switch_ports():
    """
    Modify the configuration of the egress ports at the top-of-rack switch
    to enable optimal Homa performance.
    """
    s = Switch(True)
    for port in get_exp_ports():
        print("Configuring TOR port for port %d:" % (port))
        s.config_port(port)
    s.close()

def print_help():
    print("Performs any of several configuration tasks to prepare a node for")
    print("running Homa applications.")
    print("Usage: config feature feature ...")
    print("\nEach feature may be one of the following:")
    print("    --help                 Print this help text and exit")
    print("    default                Normal configuration for Homa: equivalent to")
    print("                           'homa ~/bin/homa.ko ipv6 nic power rps'")
    print("    ecn_threshold KB       Set the ECN marking threshold for all ports in")
    print("                           the experiment to KB (Kbytes)")
    print("    homa HHH               Install and configure the Homa kernel driver;")
    print("                           HHH is the path to the homa.ko file")
    print("    ipv6                   Set up routing information so that IPv6")
    print("                           addresses can be used.")
    print("    lb CONFIG              Configure load balancing, including RSS, SoftIRQ")
    print("                           core selection, and various sysctl parameters,")
    print("                           as indicated by CONFIG (xl170_default, gen2,")
    print("                           gen3, or gen3_alt)")
    print("    mtu NNN                Set the maximum packet length to NNN")
    print("    node_names             Print out the names of all the nodes in ")
    print("                           the experiment")
    print("    nic                    Configure the NIC for optimal Homa performance")
    print("    power                  Configure power management (e.g., C-states)")
    print("                           for best Homa performance")
    print("    print_rss              Print out current RSS configuration")
    print("    reset_switch_all_ports Issue commands to TOR switch to restore original")
    print("                           port settings for all ports on the switch")
    print("                           (even those not used by current experiment)")
    print("    reset_switch_ports     Issue commands to TOR switch to restore")
    print("                           original port settings (only restores ports")
    print("                           used by the current experiment)")
    print("    rps                    Set up (and enable) RPS and RFS")
    print("    switch_buffer_limit MB Set max egress buffer space in TOR switch to")
    print("                           MB Mbytes")
    print("    switch_all_ports       Issue commands to TOR switch to configure ")
    print("                           egress ports for all ports on the switch")
    print("                           (even those not used by current experiment)")
    print("    switch_ports           Issue commands to TOR switch to configure ")
    print("                           egress ports for Homa (only configures ports")
    print("                           used by the current experiment)")

# Force print to always flush (turn off line buffering).
print = functools.partial(print, flush=True)

i = 1
while i < len(sys.argv):
    arg = sys.argv[i]
    i += 1
    if arg == "--help":
        print_help()
        exit(0)
    elif arg == "default":
        config_homa("~/HomaModule/homa.ko")
        # config_ipv6(get_num_nodes(), vlan)
        config_nic()
        config_power()
        config_rps()
    elif arg == "ecn_threshold":
        if i >= len(sys.argv):
            raise Exception("No argument provided for 'ecn_threshold' command");
            exit(1)
        kb = int(sys.argv[i])
        i += 1
        config_ecn_threshold(kb)
    elif arg == "homa":
        if i >= len(sys.argv):
            raise Exception("No argument provided for 'homa' command");
            exit(1)
        mod = sys.argv[i]
        i += 1
        config_homa(mod)
    elif arg == "ipv6":
        config_ipv6(get_num_nodes(), vlan)
    elif arg == "lb":
        if i >= len(sys.argv):
            raise Exception("No argument provided for 'lb' command");
            exit(1)
        config_lb(sys.argv[i])
        i += 1
    elif arg == "mtu":
        if i >= len(sys.argv):
            raise Exception("No argument provided for 'mtu' command");
            exit(1)
        mtu = int(sys.argv[i])
        i += 1
        config_mtu(mtu)
    elif arg == "nic":
        config_nic()
    elif arg == "node_names":
        for name in get_node_names():
            print(name)
    elif arg == "power":
        config_power()
    elif arg == "print_rss":
        print_rss()
    elif arg == "reset_switch_all_ports":
        config_reset_switch_all_ports()
    elif arg == "reset_switch_ports":
        config_reset_switch_ports()
    elif arg == "rps":
        config_rps()
    elif arg == "switch_buffer_limit":
        if i >= len(sys.argv):
            raise Exception("No argument provided for 'switch_buffer_limit' command");
            exit(1)
        config_switch_buffer_limit(float(sys.argv[i]))
        i += 1
    elif arg == "switch_all_ports":
        config_switch_all_ports()
    elif arg == "switch_ports":
        config_switch_ports()
    else:
        raise Exception("Unknown feature '%s'" % (arg))
